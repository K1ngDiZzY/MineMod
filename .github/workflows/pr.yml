name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Xmx5G"

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for proper diff analysis

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x gradlew

    - name: Build and test
      run: |
        ./gradlew clean build test --no-daemon --stacktrace
      continue-on-error: true
      id: build_test

    - name: Generate test report summary
      if: always()
      run: |
        echo "## 🔨 Build & Test Results" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.build_test.outcome }}" == "success" ]; then
          echo "✅ **Build successful**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **All tests passed**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build failed or tests failed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs above for detailed error information." >> $GITHUB_STEP_SUMMARY
        fi
        
        # Add build artifacts info if available
        if [ -d "build/libs" ] && [ "$(ls -A build/libs)" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -la build/libs/ >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload PR artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pr-build-${{ github.event.number }}-${{ github.sha }}
        path: |
          build/libs/*.jar
          build/reports/
        retention-days: 14

    - name: Comment PR with results
      uses: actions/github-script@v7
      if: always()
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          const { number: issue_number } = context.issue;
          
          const buildSuccess = '${{ steps.build_test.outcome }}' === 'success';
          const status = buildSuccess ? '✅ Success' : '❌ Failed';
          const emoji = buildSuccess ? '🎉' : '💥';
          
          const comment = `## ${emoji} PR Build Results
          
          **Status:** ${status}
          **Commit:** \`${{ github.sha }}\`
          **Java Version:** 21
          
          ${buildSuccess ? 
            '🔨 **Build:** Successful\n✅ **Tests:** All passed' : 
            '🔨 **Build:** Failed\n❌ **Tests:** Check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details'
          }
          
          ---
          *This comment was automatically generated by the PR validation workflow.*`;
          
          // Check if we already commented
          const comments = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.login === 'github-actions[bot]' && 
            comment.body.includes('PR Build Results')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner,
              repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: comment
            });
          }

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Run linting
      run: |
        ./gradlew check --no-daemon --stacktrace
      continue-on-error: true

    - name: Upload lint results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-results-${{ github.event.number }}
        path: build/reports/
        retention-days: 7